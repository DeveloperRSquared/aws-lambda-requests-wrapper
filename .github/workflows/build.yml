name: Build

on:
  pull_request:
    paths-ignore:
      - 'docs/**'
    branches:
      - main

concurrency:
  group: ${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build (${{ matrix.python-version }}) ${{ matrix.suffix }}

    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        os: [Ubuntu]
        python-version: ['3.7', '3.8', '3.9', '3.10']
        include:
          - os: Ubuntu
            image: ubuntu-latest
      fail-fast: false

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Install poetry 1.1.12
        uses: snok/install-poetry@v1
        with:
          version: 1.1.12

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        run: poetry install

      - name: Check code style (black)
        run: poetry run python -m black --config $(pwd)/pyproject.toml .

      - name: Check code style (flake8)
        run: poetry run python -m flake8 --config $(pwd)/.flake8

      - name: Check lint (pylint)
        run: poetry run python -m pylint --rcfile $(pwd)/pyproject.toml src/aws_lambda_requests_wrapper src/tests

      - name: Check typing (mypy)
        run: poetry run python -m mypy --config-file $(pwd)/pyproject.toml src/aws_lambda_requests_wrapper src/tests

      - name: Run tests (pytest)
        run: poetry run python -m pytest -c $(pwd)/pyproject.toml src/tests

  build_test_pypi:
    name: Build TestPyPI

    runs-on: ubuntu-latest
    needs: build

    environment:
      name: TestPyPI
      url: https://test.pypi.org/project/aws-lambda-requests-wrapper/

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Set up python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Install poetry 1.1.12
        uses: snok/install-poetry@v1
        with:
          version: 1.1.12

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        run: poetry install

      - name: Install pytest plugin
        run: poetry run pip install pytest-github-actions-annotate-failures

      - name: Run tests (pytest)
        run: poetry run python -m pytest -c $(pwd)/pyproject.toml src/tests

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Check project version
        run: |
          NEW_VERSION=$(poetry version --short)
          INIT_VERSION=`poetry run python -c 'from src.aws_lambda_requests_wrapper import __version__; print(__version__)' 2>&1`
          echo "Version in __init__.py: ${INIT_VERSION}. Version in pyproject.toml: ${NEW_VERSION}."
          if [[ "${NEW_VERSION}" != "${INIT_VERSION}" ]]; then
            echo "Versions do not match. Exiting ..."
            exit 1;
          fi
          # TODO(rikhil): change this to a warning / PR comment
          # git fetch --no-tags && git checkout main
          # PREVIOUS_VERSION=$(poetry version --short)
          # echo "Current version: ${NEW_VERSION}. Previous version: ${PREVIOUS_VERSION}."
          # if [[ "${NEW_VERSION}" == "${PREVIOUS_VERSION}" ]]; then
          #   echo "Bump project version. Exiting ..."
          #   exit 1;
          # fi

      - name: Build project for distribution
        run: poetry build

      - name: Publish to Test PyPI (dry run)
        env:
          POETRY_REPOSITORIES_TESTPYPI_URL: https://test.pypi.org/legacy/
          POETRY_HTTP_BASIC_TESTPYPI_USERNAME: __token__
          POETRY_HTTP_BASIC_TESTPYPI_PASSWORD: ${{ secrets.TESTPYPI_TOKEN }}
        run: poetry publish --dry-run --repository testpypi
