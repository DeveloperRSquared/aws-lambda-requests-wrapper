name: Deploy
on:
  push:
    tags:
      - 'v*'

jobs:
  deploy_test_pypi:
    runs-on: ubuntu-latest
    environment:
      name: TestPyPI
      url: https://test.pypi.org/project/aws-lambda-requests-wrapper/
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Set up python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install poetry 1.1.12
        uses: snok/install-poetry@v1
        with:
          version: 1.1.12

      - name: Install dependencies
        run: poetry install

      - name: Check package version == tag
        run: |
          source $(poetry env info --path)/bin/activate
          VERSION=$(poetry version --short)
          echo "Expected tag: refs/tags/v${VERSION}. Tag: ${{ github.ref }}."
          if [ "${{ github.ref }}" != "refs/tags/v${VERSION}" ]; then
            echo "Tag and expected tags do not match. Exiting ..."
            exit 1;
          fi

      - name: Deploy test PyPI
        env:
          POETRY_REPOSITORIES_TESTPYPI_URL: https://test.pypi.org/legacy/
          POETRY_HTTP_BASIC_TESTPYPI_USERNAME: __token__
          POETRY_HTTP_BASIC_TESTPYPI_PASSWORD: ${{ secrets.TESTPYPI_TOKEN }}
        run: poetry publish --build --repository testpypi

  deploy_pypi:
    runs-on: ubuntu-latest
    needs: deploy_test_pypi
    environment:
      name: PyPI
      url: https://pypi.org/project/aws-lambda-requests-wrapper/
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Set up python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install poetry 1.1.12
        uses: snok/install-poetry@v1
        with:
          version: 1.1.12

      - name: Install dependencies
        run: poetry install

      - name: Run tests (pytest)
        run: |
          source $(poetry env info --path)/bin/activate
          pytest -c $(pwd)/pyproject.toml src/tests

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Check package version == tag
        run: |
          source $(poetry env info --path)/bin/activate
          VERSION=$(poetry version --short)
          echo "Expected tag: refs/tags/v${VERSION}. Tag: ${{ github.ref }}."
          if [ "${{ github.ref }}" != "refs/tags/v${VERSION}" ]; then
            echo "Tag and expected tags do not match. Exiting ..."
            exit 1;
          fi

      - name: Deploy PyPI
        env:
          POETRY_HTTP_BASIC_PYPI_USERNAME: __token__
          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: poetry publish --build

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
